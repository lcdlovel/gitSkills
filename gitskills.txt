推荐网址：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013752340242354807e192f02a44359908df8a5643103a000
1.Git简介
	目前世界上最先进的分布式版本控制系统不但能自动帮我记录每次文件的改动，
	还可以让同事协作编辑，这样就不用自己管理一堆类似的文件了，也不需要把文件
	传来传去。如果想查看某次改动，只需要在软件里瞄一眼就可以

2.安装Git
	(1)首先，你可以试着输入git，看看系统有没有安装Git
	(2)用Debian或Ubuntu Linux，通过一条sudo apt-get install git就可以
	   直接完成Git的安装，非常简单。
	(3)Windows下要使用很多Linux/Unix的工具时，需要Cygwin这样的模拟环境，
	   Git也一样。Cygwin的安装和配置都比较复杂，就不建议你折腾了。不过，
	   有高人已经把模拟环境和Git都打包好了，名叫msysgit，只需要下载一
	   个单独的exe安装程序，其他什么也不用装，绝对好用。
	(4) 安装完成后，还需要最后一步设置，在命令行输入：
		git config --global user.name "Your Name"
        git config --global user.email "email@example.com"
		注意git config命令的--global参数，用了这个参数，表示你这
		台机器上所有的Git仓库都会使用这个配置，
		当然也可以对某个仓库指定不同的用户名和Email地址
3.创建版本库
	mkdir xxx 创建一个新的空目录
	cd  xxx   进入这个空目录
	pwd  显示这个目录的路径
文件中添加版本库
	git add xxx 把文件添加到仓库 (./ 全部文件)
	git commit -m "xxx" 把文件提交到仓库 
		(add 不同的文件 commit可以一次提交多个)
	git status 时刻掌握仓库当前状况
	git diff 显示修改内容
	git log 显示从最近到最远的提交历史 commit id 是一个16进制的数
	git log --pretty=oneline 不同版本提交各都显示在一行
	git reflog 查看命令历史
	git add命令实际上就是把提交的所有修改放到暂存区（Stage）
	git commit 只负责把暂存区的修改提交的到master中
4.版本回退和回归未来
   HEAD 指向的版本就是当前版本
	git reset --hard （1）commit—id 
					 （2）HEAD^ 上次版本
					 （3）HEAD^^ 上上次版本
5.撤销修改
	丢弃工作区
		git checkout -- xxx 把文件在工作区的修改全部撤销掉
		追回最近一次的git commit或git add的现状

		git checkout xxx 切换到另一个分支
	丢弃暂存区
		（1）git reset HEAD file
		（2）git checkout -- xxx

	如果已经提交 则版本回归(前提是未推送到远程库中)

	删除文件 git rm xxx 删除了一个文件(删除后需要提交一次)

6.远程仓库
	1.创建SSH Key
		ssh-keygen -t rsa -C "youremail@example.com"
		你需要把邮件地址换成你自己的邮件地址，然后一路回车，
		使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
		如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，
		id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

	2.登陆GitHub，打开“Account settings”，“SSH Keys”页面：
		然后，点“Add SSH Key”，填上任意Title，在Key文本框里
		粘贴id_rsa.pub文件的内容：
	3.git remote add origin git@github.com:michaelliao/learngit.git
		添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，
		但是origin这个名字一看就知道是远程库			
	
	4.git push -u origin master
	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master
	分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分
	支关联起来，在以后的推送或者拉取时就可以简化命令。
	
	5. git push origin master
	把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

clone远程库
	git clone git@github.com:michaelliao/gitskills.git 
	注意把Git库的地址换成你自己的，然后进入gitskills目录看看，已经有README.md文件了。
	Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。

使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放
http端口的公司内部就无法使用ssh协议而只能用https。
=================================================================================
第二天

1.创建和合并分支
	查看分支：git branch

	创建分支：git branch <name>

	切换分支：git checkout <name>

	创建+切换分支：git checkout -b <name>

	合并某分支到当前分支：git merge <name>

	删除分支：git branch -d <name>

2.解决冲突
	当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

	用git log --graph命令可以看到分支合并图。

3.分支管理策略
	Git分支十分强大，在团队开发中应该充分应用。
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
	能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
	
4.Bug分支
	每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
	当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复
	它，但是，等等，当前正在dev上进行的工作还没有提交工作只进行到一半，还没法提交，预计完
	成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
	幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，
	等以后恢复现场后继续工作
	1.git stash 存储现场
	2.git checkout master  git checkout -b issue-101 切换至其他分支进行修改bug
	3.git checkout master  
		git merge --no-ff -m "merged bug fix 101" issue-101
			git branch -d issue-101
		修改完成后 合并并删除修改的分支
	4.git checkout dev 切换至之前工作的分支
	5. git stash list
		工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
		一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
		你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
		git stash apply stash@{0}

5.Feature分支
	如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

6.多人协作
	当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin。
    要查看远程库的信息，用
	git remote： git remote -v显示更详细的信息：
	git push origin master 推送分支
	如果要推送其他分支，比如dev，就改成：
	git push origin dev

	现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
	git checkout -b dev origin/dev
	现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：

	推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，
	先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：

	git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接
	这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：

	1.首先，可以试图用git push origin branch-name推送自己的修改；

	2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

	3.如果合并有冲突，则解决冲突，并在本地提交；

	4.没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
	git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
	用命令git branch --set-upstream branch-name origin/branch-name


	小节
		查看远程库信息，使用git remote -v；

	本地新建的分支如果不推送到远程，对其他人就是不可见的；

	从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

	在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

	建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

	从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

7.标签管理
	1.创建标签
		1.命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

		2.git tag -a <tagname> -m "blablabla..."可以指定标签信息；

		3.git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；

		4.命令git tag可以查看所有标签。
	2.操作标签
		1.命令git push origin <tagname>可以推送一个本地标签；

		2.命令git push origin --tags可以推送全部未推送过的本地标签；

		3.命令git tag -d <tagname>可以删除一个本地标签；

		4.命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

8.使用码云
	我们可以删除已有的GitHub远程库：git remote rm origin
	再关联码云的远程库（注意路径中需要填写正确的用户名）：
	git remote add origin git@gitee.com:liaoxuefeng/learngit.git

	本地库关联多个库
	先关联GitHub的远程库：

	git remote add github git@github.com:michaelliao/learngit.git
	注意，远程库的名称叫github，不叫origin了。

	接着，再关联码云的远程库：
	git remote add gitee git@gitee.com:liaoxuefeng/learngit.git

9.忽略特殊文件
	忽略某些文件时，需要编写.gitignore；
	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理

10.配置别名
	git config --global alias.st status。
	很多人都用co表示checkout，ci表示commit，br表示branch：
	git config --global alias.co checkout
	git config --global alias.ci commit
	git config --global alias.br branch
	 cat .git/config 
	[core]
		repositoryformatversion = 0
		filemode = true
		bare = false
		logallrefupdates = true
		ignorecase = true
		precomposeunicode = true
	remote "origin"]
		url = git@github.com:michaelliao/learngit.git
		fetch = +refs/heads/*:refs/remotes/origin/*
	[branch "master"]
		remote = origin
		merge = refs/heads/master
	[alias]
		last = log -1	
		别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
		而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：

11.搭建Git服务器
1.第一步，安装git：$ sudo apt-get install git
	2.第二步，创建一个git用户，用来运行git服务：$ sudo adduser git
	3.第三步，创建证书登录：
			收集所有需要登录的用户的公钥，
			就是他们自己的id_rsa.pub文件，
			把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
	4.第四步，初始化Git仓库：
		先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
		$ sudo git init --bare sample.git
		Git就会创建一个裸仓库，裸仓库没有工作区，
		因为服务器上的Git仓库纯粹是为了共享，
		所以不让用户直接登录到服务器上去改工作区，
		并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
		$ sudo chown -R git:git sample.git
	5.第五步，禁用shell登录：
		出于安全考虑，第二步创建的git用户不允许登录shell，
		这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
		git:x:1001:1001:,,,:/home/git:/bin/bash
	改为：
		git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
		这样，git用户可以正常通过ssh使用git，但无法登录shell，
		因为我们为git用户指定的git-shell每次一登录就自动退出。
	6.第六步，克隆远程仓库：
		现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
		$ git clone git@server:/srv/sample.git
		Cloning into 'sample'...
		warning: You appear to have cloned an empty repositor
	
